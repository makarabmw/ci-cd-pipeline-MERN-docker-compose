version: '3.8'
# service
services:
  # all service name
  nginx:
    image: nginx
    container_name: nginx
    ports:
      - "80:80"
      - "3000:3000"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
    restart: always
    networks:
      - app-network
  # server service

  server:
    # build the server image from the Dockerfile in the current directory
    image: makaraksk/ci-cd-mern-dc-backend:v1.0.${IMAGE_TAG}
    # build:
    #   context: ./server
    #   dockerfile: Dockerfile
    container_name: backend
    # expose port 3000 to the host machine
    ports:
      - '5000:5000'
    # set environment variables for the server
    env_file:
      - ./.env
    environment:
      - DB_HOST=mongodb_server
      - DB_USER=$MONGODB_USER
      - DB_PASSWORD=$MONGODB_PASSWORD
      - DB_NAME=$MONGODB_DATABASE
      - DB_PORT=$MONGODB_DOCKER_PORT
    restart: always
    # depends on the mongodb service to start first
    depends_on:
      - mongodb
    networks:
      - app-network
    
  client:
    # build the client image from the Dockerfile in the current directory
    image: makaraksk/ci-cd-mern-dc-frontend:v1.0.${IMAGE_TAG}
    # build:
    #   context: ./client
    #   dockerfile: Dockerfile
    container_name: frontend
    # expose port 3000 to the host machine
    ports:
      - '3000:80'
    # set environment variables for the client
    env_file: ./.env
    # depends on the server service to start first
    restart: always
    depends_on:
      - server
    networks:
      - app-network

  # mongodb service
  mongodb:
    # use the official MongoDB image from Docker Hub
    image: mongo:latest
    container_name: mongodb_server
    # set environment variables for MongoDB
    env_file: ./.env  
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGODB_USER
      - MONGO_INITDB_ROOT_PASSWORD=$MONGODB_PASSWORD
    # expose port 27017 to the host machine
    ports:
      - '27017:27017'
    # mount a volume to persist data in the container
    volumes:
      # - ./../mydata:/data/db
      - mongodb_data:/data/db
    networks:
      - app-network

networks:
  # define a network for the services to communicate
  app-network:
    driver: bridge

# volume  define
volumes:
  # define a volume for MongoDB data
  mongodb_data:

  